#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mando:server');
const http = require('http');
const url = require('url');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
const games = [];
const game = function () {
  return {
    a: false,
    b:false
  };
}

io.on('connection', function(socket){
  const gameName = socket.handshake.headers.referer.replace('http://'+socket.handshake.headers.host+'/', '');
  if (!games[gameName]) games[gameName] = game();
  const players = games[gameName];
  var id = socket.id;

  if (players.a === false) {
    players.a = id;
  } else if (players.b === false) {
    players.b = id;
  	const getRandomInt = function (min, max) {
	    return Math.floor(Math.random() * (max - min + 1)) + min;
  	}
    const trees = {};
  	for (x=0; x  < 30; x++) {
      trees[x] = {};
  	  for (y=0; y < 30; y++) {
        trees[x][y] = getRandomInt(0,100);
  	  }
  	}
    io.sockets.emit('drawMap', trees);
  } else {
    console.log('no more players');
  }
  console.log('a user connected',id, players);

  socket.emit('newPlayer', players, id);

  //socket.broadcast.emit('newPlayer', players);

  socket.on('enemyClick', function(data){
    socket.broadcast.emit('enemyClick', data);
  });
  socket.on('disconnect', function(){
    console.log('user disconnected');
    io.emit('removeOtherPlayer', id);
  });
});
